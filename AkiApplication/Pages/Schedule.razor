@page "/schedule"
@using LubricantApp.Data.Models
@using System.Text.Json
@using static AkiApplication.Controllers.BankController
@inject IHttpClientFactory ClientFactory

<RadzenRow>
    <RadzenColumn Size="12" Class="rz-text-align-center rz-border-info-light">
        <RadzenChart>
            <RadzenPieSeries Title="入金" Data=@revenue CategoryProperty="Date" ValueProperty="Revenue">
            </RadzenPieSeries>
        </RadzenChart>
    </RadzenColumn>


    <RadzenColumn Size="6" Class="rz-text-align-center rz-border-info-light">
        入金
        <RadzenButton class="w-100" Text="データ追加" Click="@(args => AddRow(receipts,receiptsGrid))"></RadzenButton>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                        PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" EditMode="DataGridEditMode.Multiple"
                        ShowPagingSummary="true" TItem="TransactionDetails" @ref=receiptsGrid Data=@receipts>
            <Columns>
                <RadzenDataGridColumn TItem="TransactionDetails" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="data">
                        <RadzenButton Icon="edit" ButtonStyle=@ButtonStyle.Success Size=@ButtonSize.Medium Click="@(args => EditRow(data,receipts,receiptsGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="delete" ButtonStyle=@ButtonStyle.Danger Size=@ButtonSize.Medium Click="@(args => DeleteRow(data,receipts,receiptsGrid))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenButton Icon="check" ButtonStyle=@ButtonStyle.Success Size=@ButtonSize.Medium Click="@(args => SaveRow(data,receiptsGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle=@ButtonStyle.Light Size=@ButtonSize.Medium Click="@(args => CancelRow(data,receiptsGrid))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Datetime" Title="日付" Width="180px">
                    <Template Context="data">
                        @String.Format("{0:d}", data.Datetime)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenDatePicker Style="width:100%;" TValue="DateTime" ShowTime="false" @bind-Value=@data.Datetime
                                          ShowSeconds="false" HoursStep="1" MinutesStep="10" SecondsStep="0" DateFormat="yyyy/MM/dd" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Memo" Title="メモ" Sortable=false>
                    <EditTemplate Context="data">
                        <RadzenTextBox Style="width:100%; display: block" 　@bind-Value="data.Memo" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Mony" Title="金額" Width="150px">
                    <Template Context="data">
                        @String.Format("{0:C}", data.Mony)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenNumeric Style="width:100%;" TValue="int" @bind-Value=@data.Mony />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>

    <RadzenColumn Size="6" Class="rz-text-align-center rz-border-info-light">
        出金
        <RadzenButton class="w-100" Text="データ追加" Click="@(args => AddRow(disbursements,disbursementGrid))"></RadzenButton>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                        PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" EditMode="DataGridEditMode.Multiple"
                        ShowPagingSummary="true" TItem="TransactionDetails" @ref=disbursementGrid Data=@disbursements>
            <Columns>
                <RadzenDataGridColumn TItem="TransactionDetails" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="data">
                        <RadzenButton Icon="edit" ButtonStyle=@ButtonStyle.Success Size=@ButtonSize.Medium Click="@(args => EditRow(data,disbursements,disbursementGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="delete" ButtonStyle=@ButtonStyle.Danger Size=@ButtonSize.Medium Click="@(args => DeleteRow(data,disbursements,disbursementGrid))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenButton Icon="check" ButtonStyle=@ButtonStyle.Success Size=@ButtonSize.Medium Click="@(args => SaveRow(data,disbursementGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle=@ButtonStyle.Light Size=@ButtonSize.Medium Click="@(args => CancelRow(data,disbursementGrid))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Datetime" Title="日付" Width="180px">
                    <Template Context="data">
                        @String.Format("{0:d}", data.Datetime)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenDatePicker Style="width:100%;" TValue="DateTime" ShowTime="false" @bind-Value=@data.Datetime
                                          ShowSeconds="false" HoursStep="1" MinutesStep="10" SecondsStep="0" DateFormat="yyyy/MM/dd" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Memo" Title="メモ" Sortable=false>
                    <EditTemplate Context="data">
                        <RadzenTextBox Style="width:100%; display: block" 　@bind-Value="data.Memo" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Mony" Title="金額" Width="150px">
                    <Template Context="data">
                        @String.Format("{0:C}", data.Mony)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenNumeric Style="width:100%;" TValue="int" @bind-Value=@data.Mony />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>

@code {
    HttpWrapper httpWrapper;
    RadzenDataGrid<TransactionDetails> receiptsGrid;
    IList<TransactionDetails> receipts = new List<TransactionDetails>();
    RadzenDataGrid<TransactionDetails> disbursementGrid;
    IList<TransactionDetails> disbursements = new List<TransactionDetails>();
    DataItem[] revenue = new DataItem[] {
        new DataItem
        {
            Date = "入金",
            Revenue = 0
        },
        new DataItem
        {
            Date = "出金",
            Revenue = 0
        },

    };

    protected override async Task OnInitializedAsync()
    {
        httpWrapper = new HttpWrapper(ClientFactory);
    }


    async Task AddRow(IList<TransactionDetails> details, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        var orderToInsert = new TransactionDetails()
            {
                Datetime = DateTime.Now,
                Mony = 1000,
            };
        details.Add(orderToInsert);
        await dataGrid.Reload();
        await dataGrid.LastPage();
    }

    async Task EditRow(TransactionDetails order, IList<TransactionDetails> details, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        foreach (var i in details)
        {
            if (i == order)
            {
                await dataGrid.EditRow(order);
            }
            else
            {
                dataGrid.CancelEditRow(i);
            }
        }
    }

    async Task DeleteRow(TransactionDetails order, IList<TransactionDetails> details, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        details.Remove(order);
        await dataGrid.Reload();
    }

    async Task CancelRow(TransactionDetails order, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        dataGrid.CancelEditRow(order);
    }

    async Task SaveRow(TransactionDetails order, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        await dataGrid.UpdateRow(order);

    }


    class DataItem
    {
        public string Date { get; set; }
        public double Revenue { get; set; }
    }
}
