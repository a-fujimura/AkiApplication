@page "/register"
@using static AkiApplication.Controllers.BankController

<RadzenRow>
    <RadzenColumn Size="12" Class="rz-text-align-center rz-border-info-light">
    </RadzenColumn>
    <RadzenColumn Size="12" Class="rz-text-align-center rz-border-info-light">
        <RadzenDropDown Data=@Years TValue="string" @bind-Value=@YearSelect AllowFiltering="true">
        </RadzenDropDown>
        年
        <RadzenDropDown Data=@Months TValue="string" @bind-Value=@MonthSelect AllowFiltering="true">
        </RadzenDropDown>
        月
    </RadzenColumn>
    <RadzenColumn Size="6" Class="rz-text-align-center rz-border-info-light">
        入金
        <RadzenButton class="w-100" Text="データ追加" Click="AddIn"></RadzenButton>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                        PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" EditMode="DataGridEditMode.Multiple"
                        ShowPagingSummary="true" TItem="TransactionDetails" @ref=receiptsGrid Data=@receipts>
            <Columns>
                <RadzenDataGridColumn TItem="TransactionDetails" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="data">
                        <RadzenButton Icon="edit" ButtonStyle=@ButtonStyle.Success Size=@ButtonSize.Medium Click="@(args => EditRow(data,receipts,receiptsGrid))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" Click="@(args => SaveRow(data,receiptsGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => CancelRow(data,receiptsGrid))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Datetime" Title="日付">
                    <EditTemplate Context="data">
                        <RadzenDatePicker Style="width:100%;" TValue="DateTime" ShowTime="false" @bind-Value=@data.Datetime
                                          ShowSeconds="false" HoursStep="1" MinutesStep="10" SecondsStep="0" DateFormat="yyyy/MM/dd" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Mony" Title="金額">
                    <EditTemplate Context="data">
                        <RadzenNumeric Style="width:100%;" TValue="int" @bind-Value=@data.Mony />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>

    <RadzenColumn Size="6" Class="rz-text-align-center rz-border-info-light">
        出金
        <RadzenButton class="w-100" Text="データ追加" Click="AddOut"></RadzenButton>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                        PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" EditMode="DataGridEditMode.Multiple"
                        ShowPagingSummary="true" TItem="TransactionDetails" @ref=disbursementGrid Data=@disbursements>
            <Columns>
                <RadzenDataGridColumn TItem="TransactionDetails" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="data">
                        <RadzenButton Icon="edit" ButtonStyle=@ButtonStyle.Success Size=@ButtonSize.Medium Click="@(args => EditRow(data,disbursements,disbursementGrid))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" Click="@(args => SaveRow(data,disbursementGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => CancelRow(data,disbursementGrid))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Datetime" Title="日付">
                    <EditTemplate Context="data">
                        <RadzenDatePicker Style="width:100%;" TValue="DateTime" ShowTime="false" @bind-Value=@data.Datetime
                                          ShowSeconds="false" HoursStep="1" MinutesStep="10" SecondsStep="0" DateFormat="yyyy/MM/dd" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Mony" Title="金額">
                    <EditTemplate Context="data">
                        <RadzenNumeric Style="width:100%;" TValue="int" @bind-Value=@data.Mony />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>
@code {
    RadzenDataGrid<TransactionDetails> receiptsGrid;
    IList<TransactionDetails> receipts = new List<TransactionDetails>();
    RadzenDataGrid<TransactionDetails> disbursementGrid;
    IList<TransactionDetails> disbursements = new List<TransactionDetails>();
    List<string> Years = new List<string>() { "2023", "2022", "2021", "2020", "2019", "2018", "2017" };
    List<string> Months = new List<string>() { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" };
    string YearSelect = "2023";
    string MonthSelect = "1";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    async Task AddIn()
    {
        var orderToInsert = new TransactionDetails()
            {
                Key = receipts.Count() + 1,
                Datetime = DateTime.Now
            };
        receipts.Add(orderToInsert);
        await receiptsGrid.Reload();
        await receiptsGrid.LastPage();
    }

    async Task AddOut()
    {
        var orderToInsert = new TransactionDetails()
            {
                Key = disbursements.Count() + 1,
                Datetime = DateTime.Now
            };
        disbursements.Add(orderToInsert);
        await disbursementGrid.Reload();
        await disbursementGrid.LastPage();
    }

    async Task EditRow(TransactionDetails order, IList<TransactionDetails> details, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        foreach (var i in details)
        {
            if (i.Key == order.Key)
            {
                await dataGrid.EditRow(order);
            }
            else
            {
                dataGrid.CancelEditRow(i);
            }
        }
    }


    async Task CancelRow(TransactionDetails order, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        dataGrid.CancelEditRow(order);
    }


    async Task SaveRow(TransactionDetails order, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        await dataGrid.UpdateRow(order);
    }

    async Task SaveDisbursement(TransactionDetails order)
    {

    }
}

