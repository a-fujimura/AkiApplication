@page "/register"
@using LubricantApp.Data.Models
@using System.Text.Json
@using static AkiApplication.Controllers.BankController
@inject IHttpClientFactory ClientFactory

<RadzenRow>
    <RadzenColumn Size="12" Class="rz-text-align-center rz-border-info-light">
        <RadzenDropDown Data=@Years TValue="string" @bind-Value=@YearSelect AllowFiltering="true" Change=@(args => OnChange())>
        </RadzenDropDown>
        年
        <RadzenDropDown Data=@Months TValue="string" @bind-Value=@MonthSelect AllowFiltering="true" Change=@(args => OnChange())>
        </RadzenDropDown>
        月
    </RadzenColumn>

    <RadzenColumn Size="6" Class="rz-text-align-center rz-border-info-light">
        入金
        <RadzenButton class="w-100" Text="データ追加" Click="@(args => AddRow(receipts,receiptsGrid))"></RadzenButton>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                        PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" EditMode="DataGridEditMode.Multiple"
                        ShowPagingSummary="true" TItem="TransactionDetails" @ref=receiptsGrid Data=@receipts>
            <Columns>
                <RadzenDataGridColumn TItem="TransactionDetails" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="data">
                        <RadzenButton Icon="edit" ButtonStyle=@ButtonStyle.Success Size=@ButtonSize.Medium Click="@(args => EditRow(data,receipts,receiptsGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="delete" ButtonStyle=@ButtonStyle.Success Size=@ButtonSize.Medium Click="@(args => DeleteRow(data,receipts,receiptsGrid))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" Click="@(args => SaveRow(data,receiptsGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => CancelRow(data,receiptsGrid))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Datetime" Title="日付" Width="180px">
                    <Template Context="data">
                        @String.Format("{0:d}", data.Datetime)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenDatePicker Style="width:100%;" TValue="DateTime" ShowTime="false" @bind-Value=@data.Datetime
                                          ShowSeconds="false" HoursStep="1" MinutesStep="10" SecondsStep="0" DateFormat="yyyy/MM/dd" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Memo" Title="メモ" Sortable=false>
                    <EditTemplate Context="data">
                        <RadzenTextBox Style="width:100%; display: block" 　@bind-Value="data.Memo" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Mony" Title="金額" Width="150px">
                    <Template Context="data">
                        @String.Format("{0:C}", data.Mony)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenNumeric Style="width:100%;" TValue="int" @bind-Value=@data.Mony />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>

    <RadzenColumn Size="6" Class="rz-text-align-center rz-border-info-light">
        出金
        <RadzenButton class="w-100" Text="データ追加" Click="@(args => AddRow(disbursements,disbursementGrid))"></RadzenButton>
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
                        PageSize="15" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" EditMode="DataGridEditMode.Multiple"
                        ShowPagingSummary="true" TItem="TransactionDetails" @ref=disbursementGrid Data=@disbursements>
            <Columns>
                <RadzenDataGridColumn TItem="TransactionDetails" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="100px">
                    <Template Context="data">
                        <RadzenButton Icon="edit" ButtonStyle=@ButtonStyle.Success Size=@ButtonSize.Medium Click="@(args => EditRow(data,disbursements,disbursementGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="delete" ButtonStyle=@ButtonStyle.Danger Size=@ButtonSize.Medium Click="@(args => DeleteRow(data,disbursements,disbursementGrid))">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" Click="@(args => SaveRow(data,disbursementGrid))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" Class="my-1 ms-1" Click="@(args => CancelRow(data,disbursementGrid))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Datetime" Title="日付" Width="180px">
                    <Template Context="data">
                        @String.Format("{0:d}", data.Datetime)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenDatePicker Style="width:100%;" TValue="DateTime" ShowTime="false" @bind-Value=@data.Datetime
                                          ShowSeconds="false" HoursStep="1" MinutesStep="10" SecondsStep="0" DateFormat="yyyy/MM/dd" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Memo" Title="メモ" Sortable=false>
                    <EditTemplate Context="data">
                        <RadzenTextBox Style="width:100%; display: block" 　@bind-Value="data.Memo" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="TransactionDetails" Property="Mony" Title="金額" Width="150px">
                    <Template Context="data">
                        @String.Format("{0:C}", data.Mony)
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenNumeric Style="width:100%;" TValue="int" @bind-Value=@data.Mony />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenColumn>
</RadzenRow>
@code {
    RadzenDataGrid<TransactionDetails> receiptsGrid;
    IList<TransactionDetails> receipts = new List<TransactionDetails>();
    RadzenDataGrid<TransactionDetails> disbursementGrid;
    IList<TransactionDetails> disbursements = new List<TransactionDetails>();
    List<string> Years = new List<string>() { "2023", "2022", "2021", "2020", "2019", "2018", "2017" };
    List<string> Months = new List<string>() { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };
    string YearSelect = "2023";
    string MonthSelect = "01";
    HttpWrapper httpWrapper;

    protected override async Task OnInitializedAsync()
    {
        httpWrapper = new HttpWrapper(ClientFactory);
        await OnChange();
        MonthSelect = Months[0];
    }

    protected override async Task OnParametersSetAsync()
    {
    }

    async Task AddRow(IList<TransactionDetails> details, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        var orderToInsert = new TransactionDetails()
            {
                Datetime = new DateTime(int.Parse(YearSelect), int.Parse(MonthSelect), 1),
                Mony = 1000,
            };
        details.Add(orderToInsert);
        await dataGrid.Reload();
        await dataGrid.LastPage();
    }

    async Task EditRow(TransactionDetails order, IList<TransactionDetails> details, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        foreach (var i in details)
        {
            if (i == order)
            {
                await dataGrid.EditRow(order);
            }
            else
            {
                dataGrid.CancelEditRow(i);
            }
        }
    }

    async Task DeleteRow(TransactionDetails order, IList<TransactionDetails> details, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        details.Remove(order);
        await dataGrid.Reload();
        await Save();
    }

    async Task CancelRow(TransactionDetails order, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        dataGrid.CancelEditRow(order);
    }

    async Task SaveRow(TransactionDetails order, RadzenDataGrid<TransactionDetails> dataGrid)
    {
        await dataGrid.UpdateRow(order);
        await Save();
    }

    public async Task Save()
    {
        var content1 = new MultipartFormDataContent();
        content1.Add(new StringContent(JsonSerializer.Serialize<List<TransactionDetails>>(receipts.ToList())), "file", "test.json");
        var rslt1 = await httpWrapper.GetAsync($"https://localhost:7272/receipt/set/{YearSelect}/{MonthSelect}", content1);
        content1.Dispose();

        var content2 = new MultipartFormDataContent();
        content2.Add(new StringContent(JsonSerializer.Serialize<List<TransactionDetails>>(disbursements.ToList())), "file", "test.json");
        var rslt2 = await httpWrapper.GetAsync($"https://localhost:7272/disbursement/set/{YearSelect}/{MonthSelect}", content2);
        content2.Dispose();
    }

    async Task OnChange()
    {
        var today = DateTime.Now;
        var selday = new DateTime(int.Parse(YearSelect), 1, 1);

        Months.Clear();
        for (var i = selday; i < today; i = i.AddMonths(1))
        {
            Months.Add((i.Month).ToString("D2"));
            if (i.Month >= 12)
            {
                break;
            }
        }

        Months = Months.OrderByDescending(x => x).ToList();

        var receipt = await httpWrapper.GetAsync($"https://localhost:7272/receipt/get/{YearSelect}/{MonthSelect}");
        receipts = JsonSerializer.Deserialize<List<TransactionDetails>>(receipt);
        var disbursement = await httpWrapper.GetAsync($"https://localhost:7272/disbursement/get/{YearSelect}/{MonthSelect}");
        disbursements = JsonSerializer.Deserialize<List<TransactionDetails>>(disbursement);
    }
}

